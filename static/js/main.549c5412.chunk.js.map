{"version":3,"sources":["myForm.js","serviceWorker.js","App.js","index.js"],"names":["TheMenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","useStyles","makeStyles","theme","container","display","flexWrap","formControl","margin","spacing","minWidth","maxWidth","textField","marginLeft","marginRight","dense","marginTop","menu","slider","button","FilledTextFields","classes","_React$useState","React","useState","recipient_email","latest.admissions.act_scores.midpoint.cumulative","latest.student.size","school.region_id","school.ownership","school.degrees_awarded.highest","school.institutional_characteristics.level","school.minority_serving.historically_black","singlesex.or.coed","_React$useState2","Object","slicedToArray","values","setValues","handleChange","name","event","newValue","updatedVal","target","value","Array","isArray","console","log","objectSpread","defineProperty","react_default","a","createElement","className","noValidate","autoComplete","Grid","item","Typography","variant","gutterBottom","xs","FormControl","InputLabel","htmlFor","Select","multiple","onChange","input","Input","id","renderValue","selected","join","MenuProps","map","MenuItem","key","Checkbox","checked","indexOf","ListItemText","primary","Slider","valueLabelDisplay","aria-labelledby","step","min","max","marks","label","sm","TextField","required","fullWidth","FormControlLabel","control","color","Button","onClick","length","alert","finalObj","selection","is_in","is_btwn","_i","_keys","keys","inclusive","filter_dict","generateJSON","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","window","location","reload","Boolean","hostname","match","Copyright","align","Link","href","Date","getFullYear","icon","heroContent","backgroundColor","palette","background","paper","padding","heroButtons","cardGrid","paddingTop","paddingBottom","card","height","flexDirection","cardMedia","cardContent","flexGrow","footer","App","Fragment","CssBaseline","AppBar","position","Toolbar","noWrap","Container","component","paragraph","justify","react_scroll_to","_ref","scrollTo","y","smooth","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.549c5412.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Slider from '@material-ui/core/Slider';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\n\n\n\nfunction generateJSON(selection) {\n  const is_in = {}\n  const is_btwn = {}\n\n  const keys = Object.keys(selection)\n  for (const key of keys) {\n    // Both is_in selections and is_btwn selections are contained in lists\n    // selection[key].length>0 prevents empty lists from being added (i.e. when nothing is selected for \"is_in\")\n    if ((Array.isArray(selection[key])) && (selection[key].length > 0)) {\n      // is_btwn lists will always have number as first and second inputs\n      if(typeof(selection[key][0]) == 'number'){\n        is_btwn[key] = {\n          min: selection[key][0],\n          max: selection[key][1],\n          inclusive: true,\n        }\n      // is_in lists will not be numeric\n      } else {\n        console.log(selection[key].length)\n        is_in[key] = selection[key]\n      }\n    }\n  }\n  const filter_dict = {\n    is_in,\n    is_btwn\n  }\n\n  const finalObj = {\n    filter_dict\n  }\n  finalObj['recipient_email'] = selection['recipient_email']\n  \n  return finalObj\n}\n\n\nfunction makeRequest(finalObj) {\n  console.log(finalObj)\n  fetch('https://flask-restful-collegedata.herokuapp.com/send-data', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(finalObj),\n\n  });\n}\n\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst TheMenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nconst regions = [\n  'U.S. Service Schools',\n  'New England (CT, ME, MA, NH, RI, VT)',\n  'Mid East (DE, DC, MD, NJ, NY, PA)',\n  'Great Lakes (IL, IN, MI, OH, WI)',\n  'Plains (IA, KS, MN, MO, NE, ND, SD)',\n  'Southeast (AL, AR, FL, GA, KY, LA, MS, NC, SC, TN, VA, WV)',\n  'Southwest (AZ, NM, OK, TX)',\n  'Rocky Mountains (CO, ID, MT, UT, WY)',\n  'Far West (AK, CA, HI, NV, OR, WA)',\n  'Outlying Areas (AS, FM, GU, MH, MP, PR, PW, VI)',\n];\n\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n    maxWidth: 300,\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  dense: {\n    marginTop: 16,\n  },\n  menu: {\n    width: 200,\n  },\n  slider: {\n      width: 600,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport default function FilledTextFields() {\n  const classes = useStyles();\n  const [values, setValues] = React.useState({\n    \"recipient_email\": '',\n    \n    // Sliders\n    \"latest.admissions.act_scores.midpoint.cumulative\": [0,36],\n    \"latest.student.size\": [0,50000],\n    \n    // Selects\n    \"school.region_id\": [],\n    \"school.ownership\": [],\n    \"school.degrees_awarded.highest\": [],\n    \"school.institutional_characteristics.level\": [],\n    \"school.minority_serving.historically_black\": [],\n    \"singlesex.or.coed\": [],\n  });\n\n  const handleChange = name => (event, newValue) => {\n    var updatedVal = newValue ? newValue : event.target.value\n    if(Array.isArray(event.target.value)){\n      updatedVal = event.target.value\n    }\n    console.log(updatedVal)\n    setValues({...values, [name]: updatedVal}); // this if statement is clearly not handling personChange very well\n  };\n\n  function handleClick() {\n    // console.log(apiOutput) // need to eventually return something when request occurs\n    if(values[\"recipient_email\"].length == 0){\n      alert(\"Please provide your email address\")\n    } else {\n      var apiOutput = makeRequest(generateJSON(values))\n      alert(\"Thank you for submitting. You should recieve an email with your personalized college spreadsheet in the next 10 minutes.\");\n      window.location.reload();\n    }\n    \n  }\n\n  function valuetext(value) {\n    return `${value}°C`;\n  }\n  \n\n  return (\n    <form className={classes.container} noValidate autoComplete=\"off\">\n      <Grid container spacing ={3}>\n        <Grid item>\n          <Typography variant=\"h5\" gutterBottom>\n            Basic Preferences\n          </Typography>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              {/* <Typography variant=\"body1\" gutterBottom>\n                School Facts\n              </Typography> */}\n              \n              {/* Region */}\n              <FormControl className={classes.formControl}>\n                <InputLabel htmlFor=\"select-multiple-checkbox\">Region</InputLabel>\n                <Select\n                  multiple\n                  value={values[\"school.region_id\"]}\n                  onChange={handleChange(\"school.region_id\")}\n                  input={<Input id=\"select-multiple-checkbox\" />}\n                  renderValue={selected => selected.join(', ')}\n                  MenuProps={TheMenuProps}\n                >\n                  {[\n                    'U.S. Service Schools',\n                    'New England (CT, ME, MA, NH, RI, VT)',\n                    'Mid East (DE, DC, MD, NJ, NY, PA)',\n                    'Great Lakes (IL, IN, MI, OH, WI)',\n                    'Plains (IA, KS, MN, MO, NE, ND, SD)',\n                    'Southeast (AL, AR, FL, GA, KY, LA, MS, NC, SC, TN, VA, WV)',\n                    'Southwest (AZ, NM, OK, TX)',\n                    'Rocky Mountains (CO, ID, MT, UT, WY)',\n                    'Far West (AK, CA, HI, NV, OR, WA)',\n                    'Outlying Areas (AS, FM, GU, MH, MP, PR, PW, VI)',\n                  ].map(name => (\n                    <MenuItem key={name} value={name}>\n                      {/* {console.log(values)} */}\n                      <Checkbox checked={values[\"school.region_id\"].indexOf(name) > -1} />\n                      <ListItemText primary={name} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n              \n              {/* Ownership */}\n              <FormControl className={classes.formControl}>\n                <InputLabel htmlFor=\"select-multiple-checkbox\">Ownership</InputLabel>\n                <Select\n                  multiple\n                  value={values[\"school.ownership\"]}\n                  onChange={handleChange(\"school.ownership\")}\n                  input={<Input id=\"select-multiple-checkbox\" />}\n                  renderValue={selected => selected.join(', ')}\n                  MenuProps={TheMenuProps}\n                >\n                  {[\n                    'Public',\n                    'Private nonprofit',\n                    'Private for-profit',\n                  ].map(name => (\n                    <MenuItem key={name} value={name}>\n                      <Checkbox checked={values[\"school.ownership\"].indexOf(name) > -1} />\n                      <ListItemText primary={name} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n\n              {/* Highest Degree Awarded */}\n              <FormControl className={classes.formControl}>\n                <InputLabel htmlFor=\"select-multiple-checkbox\">Highest Degree</InputLabel>\n                <Select\n                  multiple\n                  value={values[\"school.degrees_awarded.highest\"]}\n                  onChange={handleChange(\"school.degrees_awarded.highest\")}\n                  input={<Input id=\"select-multiple-checkbox\" />}\n                  renderValue={selected => selected.join(', ')}\n                  MenuProps={TheMenuProps}\n                >\n                  {[\n                    'Non-degree-granting',\n                    'Certificate degree',\n                    'Associate degree',\n                    'Bachelors degree',\n                    'Graduate degree',\n                  ].map(name => (\n                    <MenuItem key={name} value={name}>\n                      <Checkbox checked={values[\"school.degrees_awarded.highest\"].indexOf(name) > -1} />\n                      <ListItemText primary={name} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n\n              {/* Years */}\n              <FormControl className={classes.formControl}>\n                <InputLabel htmlFor=\"select-multiple-checkbox\">Years</InputLabel>\n                <Select\n                  multiple\n                  value={values[\"school.institutional_characteristics.level\"]}\n                  onChange={handleChange(\"school.institutional_characteristics.level\")}\n                  input={<Input id=\"select-multiple-checkbox\" />}\n                  renderValue={selected => selected.join(', ')}\n                  MenuProps={TheMenuProps}\n                >\n                  {[\n                    '4-year',\n                    '2-year',\n                    'Less-than-2-year',\n                  ].map(name => (\n                    <MenuItem key={name} value={name}>\n                      <Checkbox checked={values[\"school.institutional_characteristics.level\"].indexOf(name) > -1} />\n                      <ListItemText primary={name} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n\n              {/* Historically Black */}\n              <FormControl className={classes.formControl}>\n                <InputLabel htmlFor=\"select-multiple-checkbox\">HBCU</InputLabel>\n                <Select\n                  multiple\n                  value={values[\"school.minority_serving.historically_black\"]}\n                  onChange={handleChange(\"school.minority_serving.historically_black\")}\n                  input={<Input id=\"select-multiple-checkbox\" />}\n                  renderValue={selected => selected.join(', ')}\n                  MenuProps={TheMenuProps}\n                >\n                  {[\n                    'No',\n                    'Yes',\n                  ].map(name => (\n                    <MenuItem key={name} value={name}>\n                      <Checkbox checked={values[\"school.minority_serving.historically_black\"].indexOf(name) > -1} />\n                      <ListItemText primary={name} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n\n              {/* Single-Sex or Coed */}\n              <FormControl className={classes.formControl}>\n                <InputLabel htmlFor=\"select-multiple-checkbox\">Single-Sex</InputLabel>\n                <Select\n                  multiple\n                  value={values[\"singlesex.or.coed\"]}\n                  onChange={handleChange(\"singlesex.or.coed\")}\n                  input={<Input id=\"select-multiple-checkbox\" />}\n                  renderValue={selected => selected.join(', ')}\n                  MenuProps={TheMenuProps}\n                >\n                  {[\n                    \"Single-Sex: Men\",\n                    \"Single-Sex: Women\",\n                    \"Co-Educational\",\n                    // \"Not Listed\", // Maybe remove this as the others don't have an explicit options\n                  ].map(name => (\n                    <MenuItem key={name} value={name}>\n                      <Checkbox checked={values[\"singlesex.or.coed\"].indexOf(name) > -1} />\n                      <ListItemText primary={name} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n\n\n            </Grid>\n            \n          </Grid>\n        </Grid>\n        <Grid item>\n          <Typography variant=\"h5\" gutterBottom>\n            Detailed Preferences\n          </Typography>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <Typography variant=\"body1\" gutterBottom>\n                School Size\n              </Typography>\n              <Slider\n                value={values[\"latest.student.size\"]}\n                className={classes.slider}\n                onChange={handleChange(\"latest.student.size\")}\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"range-slider\"\n                step={1000}\n                min={0}\n                max={50000}\n                marks = {[\n                  {\n                    value: 0,\n                    label: '0',\n                  },\n                  {\n                    value: 50000,\n                    label: '50,000',\n                  },\n                ]}\n                // getAriaValueText={valuetext}\n              />\n            </Grid>                        \n            <Grid item xs={12}>\n              <Typography variant=\"body1\" gutterBottom>\n                Midpoint ACT Score\n              </Typography>\n              <Slider\n                value={values[\"latest.admissions.act_scores.midpoint.cumulative\"]}\n                className={classes.slider}\n                onChange={handleChange(\"latest.admissions.act_scores.midpoint.cumulative\")}\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"range-slider\"\n                min={0}\n                max={36}\n                marks = {[\n                  {\n                    value: 0,\n                    label: '0',\n                  },\n                  {\n                    value: 36,\n                    label: '36',\n                  },\n                ]}\n                // getAriaValueText={valuetext}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item>\n          <Typography variant=\"h5\" gutterBottom>\n            Recipient Information\n          </Typography>\n          <Grid container spacing={3}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                required\n                id=\"firstName\"\n                name=\"firstName\"\n                label=\"First name\"\n                fullWidth\n                autoComplete=\"fname\"\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                required\n                id=\"lastName\"\n                name=\"lastName\"\n                label=\"Last name\"\n                fullWidth\n                autoComplete=\"lname\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                required\n                id=\"email\"\n                name=\"email\"\n                label=\"Email Address\"\n                fullWidth\n                autoComplete=\"email\"\n                value = {values[\"recipient_email\"]}\n                onChange={handleChange(\"recipient_email\")}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                // required\n                id=\"highschool\"\n                name=\"highschool\"\n                label=\"High School Name\"\n                fullWidth\n                // autoComplete=\"billing postal-code\"\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                // required\n                id=\"gradyear\"\n                name=\"gradyear\"\n                label=\"Graduation Year\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControlLabel\n                control={<Checkbox color=\"secondary\" name=\"saveAddress\" value=\"yes\" />}\n                label=\"Send me more information about this project!\"\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n      {/* <FormControl className={classes.formControl}>\n        <InputLabel htmlFor=\"select-multiple-checkbox\">Tag</InputLabel>\n        <Select\n          multiple\n          value={values[\"school.region_id\"]}\n          onChange={handleChange(\"school.region_id\")}\n          input={<Input id=\"select-multiple-checkbox\" />}\n          renderValue={selected => selected.join(', ')}\n          MenuProps={TheMenuProps}\n        >\n          {names.map(name => (\n            <MenuItem key={name} value={name}>\n              <Checkbox checked={values[\"school.region_id\"].indexOf(name) > -1} />\n              <ListItemText primary={name} />\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <Slider\n        value={values[\"latest.admissions.act_scores.midpoint.cumulative\"]}\n        className={classes.slider}\n        onChange={handleChange(\"latest.admissions.act_scores.midpoint.cumulative\")}\n        valueLabelDisplay=\"auto\"\n        aria-labelledby=\"range-slider\"\n        min={0}\n        max={36}\n        // getAriaValueText={valuetext}\n      />\n      <TextField\n        id=\"outlined-email-input\"\n        label=\"Email\"\n        className={classes.textField}\n        value = {values[\"recipient_email\"]}\n        onChange={handleChange(\"recipient_email\")}\n        type=\"email\"\n        name=\"email\"\n        autoComplete=\"email\"\n        margin=\"normal\"\n        variant=\"outlined\"\n      /> */}\n      <Button onClick={handleClick} variant=\"contained\" className={classes.button}>\n        Submit\n      </Button>\n    </form>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\n// other stuff\nimport React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\n// import CameraIcon from '@material-ui/icons/PhotoCamera';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport FilledTextFields from './myForm';\nimport { ScrollTo } from \"react-scroll-to\";\n\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://www.linkedin.com/in/jackdavidweber/\">\n        Jack Weber\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'. Built with '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Material-UI.\n      </Link>\n    </Typography>\n  );\n}\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n}));\n\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"relative\">\n        <Toolbar>\n          {/* <CameraIcon className={classes.icon} /> */}\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            College Spreadsheet Generator\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <main>\n        {/* Hero unit */}\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n              College Spreadsheet Generator\n            </Typography>\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n              This tool is designed to be the first step in your college process! Simply insert your preferences below, and we will send you a personalized spreadsheet with colleges and all of the information about each one!\n            </Typography>\n            <div className={classes.heroButtons}>\n              <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n                <ScrollTo>\n                  {({ scrollTo }) => (\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => scrollTo({ y: 600, smooth: true })}>\n                      Get Started\n                    </Button>\n                  )}\n                </ScrollTo>\n                  {/* <Button variant=\"contained\" color=\"primary\">\n                    Get Started\n                  </Button> */}\n                </Grid>\n                <Grid item>\n                  <Button href= \"https://github.com/jack1536\" variant=\"outlined\" color=\"primary\">\n                    Source Code\n                  </Button>\n                </Grid>\n              </Grid>\n            </div>\n          </Container>\n        </div>\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          {/* End hero unit */}\n          <FilledTextFields/>\n        </Container>\n      </main>\n      {/* Footer */}\n      <footer className={classes.footer}>\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n          College Spreadsheet Generator\n        </Typography>\n        {/* <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\n          Click here to see the source code\n        </Typography> */}\n        <Copyright />\n      </footer>\n      {/* End footer */}\n    </React.Fragment>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport FilledTextFields from './myForm';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}